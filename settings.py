"""
Django settings for SnakrAWS project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import os
import string
from psycopg2.extensions import ISOLATION_LEVEL_SERIALIZABLE

VERBOSE_NAME = "SnakrAWS"
SITE_MODE = 'prod'
DATABASE_MODE = 'prod'
SSL_ENABLED = False  # TBD
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
VERBOSE_LOGGING = True

# Postgres DB
if DATABASE_MODE == 'dev':
    DATABASES = {
        'default': {
            'ENGINE':   'django.db.backends.postgresql_psycopg2',
            'NAME':     'YOUR DB NAME HERE',
            'HOST':     'localhost',
            'USER':     'YOUR USER NAME HERE',
            'PASSWORD': 'YOUR PASSWORD HERE',
            'PORT':      5432,
        }
    }
elif DATABASE_MODE == 'prod':
    DATABASES = {
        'default': {
            'ENGINE':   'django.db.backends.postgresql_psycopg2',
            'NAME':     'YOUR DB NAME HERE',
            'HOST':     'YOUR AWS RDS HOSTNAME HERE',
            'USER':     'YOUR USER NAME HERE',
            'PASSWORD': 'YOUR PASSWORD HERE',
            'PORT':      5432,
            'OPTIONS': {
                'isolation_level': ISOLATION_LEVEL_SERIALIZABLE,
            },
        }
    }


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'YOUR DJANGO KEY HERE'
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = (
    'snakraws',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    'django.contrib.sitemaps',
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'snakraws.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'SnakrAWS/templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'snakraws.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# geolocation lookups
GEOLOCATION_API_URL = "http://api.ipstack.com/%ip%?access_key=YOUR ACCESS KEY HERE"

# Max retries on hash collision detection
MAX_RETRIES = 3

# Number of alphabetic characters in the short URL path (min 6, max 12)
SHORTURL_PATH_SIZE = 6

# Character set to use for the short URL path. Remove easily-confused characters "0", "O", "o", "1", and "l". Keep "L".
SHORTURL_PATH_ALPHABET = string.digits + string.ascii_letters
SHORTURL_PATH_ALPHABET = SHORTURL_PATH_ALPHABET.replace("0", "").replace("O", "").replace("o", "").replace("1", "").replace("l", "")

# DON"T change this
APPEND_SLASH = False

# If the SHORTURL_HOST or SECURE_SHORTURL_HOST value is entered into a browser with no path, it will redirect to this page
# Put your custom page of last resort here
INDEX_HTML = "http://www.linkedin.com/in/bretlowery"

# If True, enable capture of the target long url's OpenGraph title ("og:title") and return it in the JSON along with the short url
# See: http://ogp.me
# For the Python PyOpenGraph site: https://pypi.python.org/pypi/PyOpenGraph
OGTITLE = True

RETURN_ALL_META = DEBUG

#
# Logging messages
#
# Enable/disable HTTP 302, 400, 404 error logging
ENABLE_LOGGING = True
VERBOSE_LOGGING = False
DATABASE_LOGGING = True
LOG_HTTP200 = True
LOG_HTTP302 = True
LOG_HTTP400 = True
LOG_HTTP403 = True
LOG_HTTP404 = True

# sorted in rough order of probability of occurrence for lookup performance
CANONICAL_MESSAGES = {
        'BLACKLISTED'                   : '403 Permission Denied (Blacklisted)',
        'ROBOT'                         : '403 Permission Denied (Bot)',
        'HTTP_301'                      : '301 Redirecting to {%s}',
        'HTTP_302'                      : '302 Redirecting to {%s}',
        'HTTP_404'                      : 'ERROR, URL {%s} not found (404)',
        'LONG_URL_SUBMITTED'            : '200 Long URL {%s} submitted',
        'VANITY_PATH_EXISTS'            : 'ERROR, the proposed vanity path for the new short URL is already in use.',
        'SHORT_URL_ENCODING_MISMATCH'   : 'ERROR, the short URL sent to this service is encoded differently from the original short URL provided and may pose a security risk. DO NOT USE the altered version.',
        'SHORT_URL_NOT_FOUND'           : 'ERROR, URL {%s} is not recognized by this service.',
        'SHORT_URL_MISMATCH'            : 'ERROR, the short URL sent to this service is different from the original short URL provided and may pose a security risk. DO NOT USE the altered version.',
        'LONG_URL_MISSING'              : 'ERROR, no long URL was submitted to the service.',
        'LONG_URL_INVALID'              : 'ERROR, the URL {%s} submitted for shortening is invalid.',
        'LONG_URL_RESUBMITTED'          : '200, Long URL {%s} resubmitted',
        'MALFORMED_REQUEST'             : 'ERROR, I don''t understand this request.',
        'STARTUP'                       : 'Snakr starting',
        'PYTHON_VERSION'                : 'Python version %s',
        'DJANGO_VERSION'                : 'Django version %s',
        'SHUTDOWN'                      : 'Snakr stopping',
        'ILLEGAL MAX_RETRIES'           : 'ERROR, MAX_RETRIES must be between 1 and 3, but is actually set to %d' % MAX_RETRIES,
        'EXCEEDED_MAX_RETRIES'          : 'ERROR, exceeded %d tries to generate new short URL.' % MAX_RETRIES,
        'HASH_COLLISION'                : 'WARNING, hash collision detected on URL {%s}.',
    }

MESSAGE_OF_LAST_RESORT = 'ERROR, an unknown exception occurred'

USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'
